-- CREATE TABLE SCRIPTS --

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_brz_bcbsla_ma_group (`Group_ID` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `Group_Original_Effective_Date` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_brz_bcbsla_ma_group_history (`Group_ID` string,
  `Group_Termination_Date` string,
  `Group_Address_Line_1` string,
  `Group_Address_Line_2` string,
  `Group_Address_Line_3` string,
  `Group_Address_City` string,
  `Group_Address_State` string,
  `Group_Address_Zip_Code` string,
  `Group_Address_Country` string,
  `Group_Email` string,
  `Group_Phone_Number` string,
  `Group_Phone_Ext` string,
  `Group_Fax_Number` string,
  `Group_Fax_Ext` string,
  `Group_Renewal_Month` string,
  `Group_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_brz_cmc_grgc_group_count (`GRGR_CK` int,
  `GRGC_MCTR_CTYP` string,
  `GRGC_EFF_DT` timestamp,
  `GRGC_TERM_DT` timestamp,
  `GRGC_COUNT` int,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_brz_cmc_grgr_group (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_NAME` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_ITS_CODE` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_brz_cmc_grgr_group_history (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_STS` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_COUNTY` string,
  `GRGR_ZIP` string,
  `GRGR_CTRY_CD` string,
  `GRGR_EMAIL` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_ERIS_MMDD` smallint,
  `CICI_ID` string,
  `GRGR_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_cmc_grgr_group_full (`start_lsn` binary,
  `operation` int,
  `update_mask` binary,
  `GRGR_CK` int,
  `CICI_ID` string,
  `GRGR_ID` string,
  `PAGR_CK` int,
  `GRGR_NAME` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_ZIP` string,
  `GRGR_COUNTY` string,
  `GRGR_CTRY_CD` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_EMAIL` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_MCTR_VIP` string,
  `MCAR_AREA_ID` string,
  `CSCS_ID` string,
  `GRGR_STS` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `EXCD_ID` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `GRGR_RENEW_MMDD` int,
  `GRGR_PREV_ANNV_DT` timestamp,
  `GRGR_CURR_ANNV_DT` timestamp,
  `GRGR_NEXT_ANNV_DT` timestamp,
  `GRGR_MCTR_PTYP` string,
  `GRGR_UNDW_USUS_ID` string,
  `GRGR_CAP_IND` string,
  `GRGR_LAST_CAP_DT` timestamp,
  `GRGR_CAP_BAT_STS` int,
  `GRGR_BILL_LEVEL` string,
  `GRGR_LMT_ADJ_MOS` int,
  `GRGR_BL_CONV_DT` timestamp,
  `GRGR_NAME_XLOW` string,
  `GRGR_CITY_XLOW` string,
  `GRGR_MCTR_LANG` string,
  `GRGR_EXTN_ADDR_IND` string,
  `WMDS_SEQ_NO` int,
  `GRGR_TOTAL_EMPL` int,
  `GRGR_TOTAL_ELIG` int,
  `GRGR_TOTAL_CONTR` int,
  `GRGR_POL_NO` string,
  `CRCY_ID` string,
  `GRGR_EIN` string,
  `GRGR_ERIS_MMDD` int,
  `GRGR_RECD_DT` timestamp,
  `GRGR_DEN_CHT_IND` string,
  `GRGR_CAP_CONV_DT` timestamp,
  `GRGR_RUNOUT_DT` timestamp,
  `GRGR_RUNOUT_EXCD` string,
  `GRGR_TRANS_ACCEPT` string,
  `GRGR_ITS_CODE` string,
  `GRGR_AUTONUM_IND` string,
  `GRGR_CONT_EFF_DT` timestamp,
  `GRGR_TERM_PREM_MOS` int,
  `GRGR_RNST_TYPE` string,
  `GRGR_RNST_VAL` int,
  `GRGR_LOCK_TOKEN` int,
  `ATXR_SOURCE_ID` timestamp,
  `SYS_LAST_UPD_DTM` timestamp,
  `SYS_USUS_ID` string,
  `SYS_DBUSER_ID` string,
  `SYS_BITMAP_NVL` int,
  `SYS_LAST_OFFSET_NVL` string,
  `GRGR_PUP_IND_NVL` string,
  `GRGR_PCPM_CAP_IND_NVL` string,
  `GRGR_PCPM_CONV_DT_NVL` timestamp,
  `GRGR_PCPM_CRCY_ID_NVL` string,
  `Load_Date` bigint,
  `file_name` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_df_group (`Group_Source_Key` string,
  `Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `ITS_Code` string,
  `Original_Effective_Date` date,
  `Group_Facets_Conversion_Date` date,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_df_group_count (`Group_Source_Key` string,
  `Count_Type` string,
  `Row_Effective_Date` timestamp,
  `Row_Term_Date` timestamp,
  `Employee_Count` int,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_df_group_count_scd (`Group_Source_Key` string,
  `Count_Type` string,
  `Row_Effective_Date` timestamp,
  `Row_Term_Date` timestamp,
  `Employee_Count` int,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);


CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_df_group_history (`Group_Source_Key` string,
  `Group_Id` string,
  `Status_Code` string,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Address_County` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Termination_Date` date,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `Renewal_MMDD` string,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `EIN` string,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string,
  `Row_Effective_Date` date,
  `Row_Term_Date` date);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_df_group_history_scd (`Group_Source_Key` string,
  `Group_Id` string,
  `Status_Code` string,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Address_County` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Termination_Date` date,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `Renewal_MMDD` string,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `EIN` string,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string,
  `__START_AT` date,
  `__END_AT` date);



CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_df_group_scd (`Group_Source_Key` string,
  `Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `ITS_Code` string,
  `Original_Effective_Date` date,
  `Group_Facets_Conversion_Date` date,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);



CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_dq_audit (`dimension_table` string,
  `target_table` string,
  `validated_table` string,
  `source` string,
  `source_schema` string,
  `input_details` string,
  `reason` map<string,boolean>,
  `dq_type` string,
  `business_date` date,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_facets_cmc_grgc_group_count (`GRGR_CK` int,
  `GRGC_MCTR_CTYP` string,
  `GRGC_EFF_DT` timestamp,
  `GRGC_TERM_DT` timestamp,
  `GRGC_COUNT` int,
  `GRGC_LOCK_TOKEN` smallint,
  `ATXR_SOURCE_ID` timestamp,
  `loadtimestamp` bigint,
  `_rescued_data` string,
  `processing_time` timestamp);



CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_facets_cmc_grgr_group (`__$start_lsn` binary,
  `__$operation` string,
  `__$update_mask` string,
  `transaction_dtm` timestamp,
  `GRGR_CK` int,
  `CICI_ID` string,
  `GRGR_ID` string,
  `PAGR_CK` int,
  `GRGR_NAME` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_ZIP` string,
  `GRGR_COUNTY` string,
  `GRGR_CTRY_CD` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_EMAIL` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_MCTR_VIP` string,
  `MCAR_AREA_ID` string,
  `CSCS_ID` string,
  `GRGR_STS` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `EXCD_ID` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_PREV_ANNV_DT` timestamp,
  `GRGR_CURR_ANNV_DT` timestamp,
  `GRGR_NEXT_ANNV_DT` timestamp,
  `GRGR_MCTR_PTYP` string,
  `GRGR_UNDW_USUS_ID` string,
  `GRGR_CAP_IND` string,
  `GRGR_LAST_CAP_DT` timestamp,
  `GRGR_CAP_BAT_STS` int,
  `GRGR_BILL_LEVEL` string,
  `GRGR_LMT_ADJ_MOS` smallint,
  `GRGR_BL_CONV_DT` timestamp,
  `GRGR_NAME_XLOW` string,
  `GRGR_CITY_XLOW` string,
  `GRGR_MCTR_LANG` string,
  `GRGR_EXTN_ADDR_IND` string,
  `WMDS_SEQ_NO` smallint,
  `GRGR_TOTAL_EMPL` int,
  `GRGR_TOTAL_ELIG` int,
  `GRGR_TOTAL_CONTR` int,
  `GRGR_POL_NO` string,
  `CRCY_ID` string,
  `GRGR_EIN` string,
  `GRGR_ERIS_MMDD` smallint,
  `GRGR_RECD_DT` timestamp,
  `GRGR_DEN_CHT_IND` string,
  `GRGR_CAP_CONV_DT` timestamp,
  `GRGR_RUNOUT_DT` timestamp,
  `GRGR_RUNOUT_EXCD` string,
  `GRGR_TRANS_ACCEPT` string,
  `GRGR_ITS_CODE` string,
  `GRGR_AUTONUM_IND` string,
  `GRGR_CONT_EFF_DT` timestamp,
  `GRGR_TERM_PREM_MOS` smallint,
  `GRGR_RNST_TYPE` string,
  `GRGR_RNST_VAL` smallint,
  `GRGR_LOCK_TOKEN` smallint,
  `ATXR_SOURCE_ID` timestamp,
  `SYS_LAST_UPD_DTM` timestamp,
  `SYS_USUS_ID` string,
  `SYS_DBUSER_ID` string,
  `SYS_BITMAP_NVL` int,
  `SYS_LAST_OFFSET_NVL` string,
  `GRGR_PUP_IND_NVL` string,
  `GRGR_PCPM_CAP_IND_NVL` string,
  `GRGR_PCPM_CONV_DT_NVL` timestamp,
  `GRGR_PCPM_CRCY_ID_NVL` string,
  `loadtimestamp` bigint,
  `_rescued_data` string,
  `processing_time` timestamp);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_facets_cmc_grgr_group_history (`HIST_ROW_ID` decimal(10,0),
  `HIST_CREATE_DTM` timestamp,
  `HIST_USUS_ID` string,
  `HIST_LOG_ACT_CD` string,
  `HIST_PHYS_ACT_CD` string,
  `HIST_IMAGE_CD` string,
  `HIST_TERM_ID` string,
  `TXN1_ROW_ID` decimal(10,0),
  `GRGR_CK` int,
  `CICI_ID` string,
  `GRGR_ID` string,
  `PAGR_CK` int,
  `GRGR_NAME` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_ZIP` string,
  `GRGR_COUNTY` string,
  `GRGR_CTRY_CD` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_EMAIL` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_MCTR_VIP` string,
  `MCAR_AREA_ID` string,
  `CSCS_ID` string,
  `GRGR_STS` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `EXCD_ID` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_PREV_ANNV_DT` timestamp,
  `GRGR_CURR_ANNV_DT` timestamp,
  `GRGR_NEXT_ANNV_DT` timestamp,
  `GRGR_MCTR_PTYP` string,
  `GRGR_UNDW_USUS_ID` string,
  `GRGR_CAP_IND` string,
  `GRGR_LAST_CAP_DT` timestamp,
  `GRGR_CAP_BAT_STS` int,
  `GRGR_BILL_LEVEL` string,
  `GRGR_LMT_ADJ_MOS` smallint,
  `GRGR_BL_CONV_DT` timestamp,
  `GRGR_NAME_XLOW` string,
  `GRGR_CITY_XLOW` string,
  `GRGR_MCTR_LANG` string,
  `GRGR_EXTN_ADDR_IND` string,
  `WMDS_SEQ_NO` smallint,
  `GRGR_TOTAL_EMPL` int,
  `GRGR_TOTAL_ELIG` int,
  `GRGR_TOTAL_CONTR` int,
  `GRGR_POL_NO` string,
  `CRCY_ID` string,
  `GRGR_EIN` string,
  `GRGR_ERIS_MMDD` smallint,
  `GRGR_RECD_DT` timestamp,
  `GRGR_DEN_CHT_IND` string,
  `GRGR_CAP_CONV_DT` timestamp,
  `GRGR_RUNOUT_DT` timestamp,
  `GRGR_RUNOUT_EXCD` string,
  `GRGR_TRANS_ACCEPT` string,
  `GRGR_ITS_CODE` string,
  `GRGR_AUTONUM_IND` string,
  `GRGR_CONT_EFF_DT` timestamp,
  `GRGR_TERM_PREM_MOS` smallint,
  `GRGR_RNST_TYPE` string,
  `GRGR_RNST_VAL` smallint,
  `GRGR_LOCK_TOKEN` smallint,
  `ATXR_SOURCE_ID` timestamp,
  `SYS_LAST_UPD_DTM` timestamp,
  `SYS_USUS_ID` string,
  `SYS_DBUSER_ID` string,
  `SYS_BITMAP_NVL` int,
  `SYS_LAST_OFFSET_NVL` string,
  `GRGR_PUP_IND_NVL` string,
  `GRGR_PCPM_CAP_IND_NVL` string,
  `GRGR_PCPM_CONV_DT_NVL` timestamp,
  `GRGR_PCPM_CRCY_ID_NVL` string,
  `loadtimestamp` bigint,
  `_rescued_data` string,
  `processing_time` timestamp);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_metadata_cdc_config (`source` string,
  `input_table` string,
  `target_table` string,
  `key_attr` string,
  `except_column_list` string,
  `compute_cdc` string,
  `scd_type` string,
  `create_date` timestamp,
  `update_date` timestamp,
  `exclude_columns` array<string>,
  `sequence_col` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_metadata_dq_config (`input_table` string,
  `target_table` string,
  `source_column_name` string,
  `action` string,
  `constraint` string,
  `is_active` string,
  `deactivation_date` timestamp,
  `create_date` timestamp,
  `mocked_ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_metadata_source_config (`source` string,
  `derived_input_tables` string,
  `source_schema` string,
  `derived_target_tables` string,
  `dimension_table` string,
  `source_details` string,
  `source_type` string,
  `frequency` string,
  `scenario` string,
  `source_system` string,
  `sourced_from` string,
  `is_active` string,
  `deactivation_date` timestamp,
  `create_date` timestamp,
  `target_table` string,
  `enable_change_data_feed` boolean,
  `business_date_column_name` string,
  `file_format` string,
  `test_mode` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_metadata_transform_config (`input_table` string,
  `target_table` string,
  `source_column_name` string,
  `type` string,
  `transform_fn_name` string,
  `is_active` string,
  `deactivation_date` timestamp,
  `create_date` timestamp);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_runtime_config (`dimension_table` string,
  `run_date` timestamp,
  `scenario` string,
  `source_params` map<string,struct<business_date:string,source_system:string,target_table:string,source_details:string,format:string>>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_bcbsla_ma_group_fail_step (`Group_ID` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `Group_Original_Effective_Date` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_bcbsla_ma_group_history_fail_step (`Group_ID` string,
  `Group_Termination_Date` string,
  `Group_Address_Line_1` string,
  `Group_Address_Line_2` string,
  `Group_Address_Line_3` string,
  `Group_Address_City` string,
  `Group_Address_State` string,
  `Group_Address_Zip_Code` string,
  `Group_Address_Country` string,
  `Group_Email` string,
  `Group_Phone_Number` string,
  `Group_Phone_Ext` string,
  `Group_Fax_Number` string,
  `Group_Fax_Ext` string,
  `Group_Renewal_Month` string,
  `Group_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_bcbsla_ma_group_history_quarantine_step (`Group_ID` string,
  `Group_Termination_Date` string,
  `Group_Address_Line_1` string,
  `Group_Address_Line_2` string,
  `Group_Address_Line_3` string,
  `Group_Address_City` string,
  `Group_Address_State` string,
  `Group_Address_Zip_Code` string,
  `Group_Address_Country` string,
  `Group_Email` string,
  `Group_Phone_Number` string,
  `Group_Phone_Ext` string,
  `Group_Fax_Number` string,
  `Group_Fax_Ext` string,
  `Group_Renewal_Month` string,
  `Group_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_bcbsla_ma_group_history_warn_step (`Group_ID` string,
  `Group_Termination_Date` string,
  `Group_Address_Line_1` string,
  `Group_Address_Line_2` string,
  `Group_Address_Line_3` string,
  `Group_Address_City` string,
  `Group_Address_State` string,
  `Group_Address_Zip_Code` string,
  `Group_Address_Country` string,
  `Group_Email` string,
  `Group_Phone_Number` string,
  `Group_Phone_Ext` string,
  `Group_Fax_Number` string,
  `Group_Fax_Ext` string,
  `Group_Renewal_Month` string,
  `Group_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_bcbsla_ma_group_quarantine_step (`Group_ID` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `Group_Original_Effective_Date` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_bcbsla_ma_group_warn_step (`Group_ID` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `Group_Original_Effective_Date` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgc_group_count_fail_step (`GRGR_CK` int,
  `GRGC_MCTR_CTYP` string,
  `GRGC_EFF_DT` timestamp,
  `GRGC_TERM_DT` timestamp,
  `GRGC_COUNT` int,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgc_group_count_quarantine_step (`GRGR_CK` int,
  `GRGC_MCTR_CTYP` string,
  `GRGC_EFF_DT` timestamp,
  `GRGC_TERM_DT` timestamp,
  `GRGC_COUNT` int,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgc_group_count_warn_step (`GRGR_CK` int,
  `GRGC_MCTR_CTYP` string,
  `GRGC_EFF_DT` timestamp,
  `GRGC_TERM_DT` timestamp,
  `GRGC_COUNT` int,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgr_group_fail_step (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_NAME` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_ITS_CODE` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgr_group_history_fail_step (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_STS` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_COUNTY` string,
  `GRGR_ZIP` string,
  `GRGR_CTRY_CD` string,
  `GRGR_EMAIL` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_ERIS_MMDD` smallint,
  `CICI_ID` string,
  `GRGR_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgr_group_history_quarantine_step (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_STS` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_COUNTY` string,
  `GRGR_ZIP` string,
  `GRGR_CTRY_CD` string,
  `GRGR_EMAIL` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_ERIS_MMDD` smallint,
  `CICI_ID` string,
  `GRGR_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgr_group_history_warn_step (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_STS` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_COUNTY` string,
  `GRGR_ZIP` string,
  `GRGR_CTRY_CD` string,
  `GRGR_EMAIL` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_ERIS_MMDD` smallint,
  `CICI_ID` string,
  `GRGR_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgr_group_quarantine_step (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_NAME` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_ITS_CODE` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_clean_cmc_grgr_group_warn_step (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_NAME` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_ITS_CODE` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group (`Group_Source_Key` string,
  `Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `ITS_Code` string,
  `Original_Effective_Date` date,
  `Group_Facets_Conversion_Date` date,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_c73550_facets (`Group_Source_Key` string,
  `Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `ITS_Code` string,
  `Original_Effective_Date` date,
  `Group_Facets_Conversion_Date` date,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_count (`Group_Source_Key` string,
  `Count_Type` string,
  `Row_Effective_Date` timestamp,
  `Row_Term_Date` timestamp,
  `Employee_Count` int,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_count_c73550_facets (`Group_Source_Key` string,
  `Count_Type` string,
  `Row_Effective_Date` timestamp,
  `Row_Term_Date` timestamp,
  `Employee_Count` int,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_count_facets (`Group_Source_Key` string,
  `Count_Type` string,
  `Row_Effective_Date` timestamp,
  `Row_Term_Date` timestamp,
  `Employee_Count` int,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_facets (`Group_Source_Key` string,
  `Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `ITS_Code` string,
  `Original_Effective_Date` date,
  `Group_Facets_Conversion_Date` date,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_history (`Group_Source_Key` string,
  `Group_Id` string,
  `Status_Code` string,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Address_County` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Termination_Date` date,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `Renewal_MMDD` string,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `EIN` string,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_history_c73550_facets (`Group_Source_Key` string,
  `Group_Id` string,
  `Status_Code` string,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Address_County` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Termination_Date` date,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `Renewal_MMDD` string,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `EIN` string,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_history_facets (`Group_Source_Key` string,
  `Group_Id` string,
  `Status_Code` string,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Address_County` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Termination_Date` date,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `Renewal_MMDD` string,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `EIN` string,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_history_vhp (`Group_Id` string,
  `Termination_Date` date,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Renewal_MMDD` string,
  `EIN` string,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Group_Source_Key` string,
  `Source_System_Code` string,
  `Status_Code` string,
  `Address_County` string,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_mapped_df_group_vhp (`Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `Original_Effective_Date` date,
  `business_date` date,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Group_Source_Key` string,
  `Source_System_Code` string,
  `ITS_Code` string,
  `Group_Facets_Conversion_Date` date,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_scd_df_group (`Group_Source_Key` string,
  `Group_Id` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `ITS_Code` string,
  `Original_Effective_Date` date,
  `Group_Facets_Conversion_Date` date,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_scd_df_group_count (`Group_Source_Key` string,
  `Count_Type` string,
  `Row_Effective_Date` timestamp,
  `Row_Term_Date` timestamp,
  `Employee_Count` int,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_scd_df_group_history (`Group_Source_Key` string,
  `Group_Id` string,
  `Status_Code` string,
  `Address_Line_1` string,
  `Address_Line_2` string,
  `Address_Line_3` string,
  `Address_City` string,
  `Address_State` string,
  `Address_County` string,
  `Zip_Code` string,
  `Country` string,
  `Email` string,
  `Phone_Nbr` string,
  `Phone_Ext` string,
  `Fax_Nbr` string,
  `Fax_Ext` string,
  `Termination_Date` date,
  `Term_Reason_Code` string,
  `Reinstatement_Date` date,
  `Renewal_MMDD` string,
  `ERISA_Plan_Begin_MMDD` string,
  `Client_Code` string,
  `EIN` string,
  `business_date` date,
  `Source_System_Code` string,
  `Row_Change_Datetime` timestamp,
  `Row_Is_Deleted_Ind` string,
  `__START_AT` date,
  `__END_AT` date);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_transform_bcbsla_ma_group (`Group_ID` string,
  `Group_Name` string,
  `Group_Type_Code` string,
  `Group_Original_Effective_Date` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_transform_bcbsla_ma_group_history (`Group_ID` string,
  `Group_Termination_Date` string,
  `Group_Address_Line_1` string,
  `Group_Address_Line_2` string,
  `Group_Address_Line_3` string,
  `Group_Address_City` string,
  `Group_Address_State` string,
  `Group_Address_Zip_Code` string,
  `Group_Address_Country` string,
  `Group_Email` string,
  `Group_Phone_Number` string,
  `Group_Phone_Ext` string,
  `Group_Fax_Number` string,
  `Group_Fax_Ext` string,
  `Group_Renewal_Month` string,
  `Group_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `Operation_Code` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_transform_cmc_grgc_group_count (`GRGR_CK` int,
  `GRGC_MCTR_CTYP` string,
  `GRGC_EFF_DT` timestamp,
  `GRGC_TERM_DT` timestamp,
  `GRGC_COUNT` int,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_transform_cmc_grgr_group (`GRGR_CK` string,
  `GRGR_ID` string,
  `GRGR_NAME` string,
  `GRGR_MCTR_TYPE` string,
  `GRGR_ITS_CODE` string,
  `GRGR_ORIG_EFF_DT` timestamp,
  `GRGR_CONV_DT` timestamp,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string);

CREATE TABLE IF NOT EXISTS edl_dev_ctlg.structured.dlt_slv_transform_cmc_grgr_group_history (`GRGR_CK` int,
  `GRGR_ID` string,
  `GRGR_STS` string,
  `GRGR_ADDR1` string,
  `GRGR_ADDR2` string,
  `GRGR_ADDR3` string,
  `GRGR_CITY` string,
  `GRGR_STATE` string,
  `GRGR_COUNTY` string,
  `GRGR_ZIP` string,
  `GRGR_CTRY_CD` string,
  `GRGR_EMAIL` string,
  `GRGR_PHONE` string,
  `GRGR_PHONE_EXT` string,
  `GRGR_FAX` string,
  `GRGR_FAX_EXT` string,
  `GRGR_TERM_DT` timestamp,
  `GRGR_MCTR_TRSN` string,
  `GRGR_RNST_DT` timestamp,
  `GRGR_RENEW_MMDD` smallint,
  `GRGR_ERIS_MMDD` smallint,
  `CICI_ID` string,
  `GRGR_EIN` string,
  `loadtimestamp` timestamp,
  `source` string,
  `source_schema` string,
  `business_date` date,
  `__$operation` string,
  `processing_time` bigint,
  `is_valid` boolean,
  `action_details` map<string,boolean>,
  `Source_System_Code` string);